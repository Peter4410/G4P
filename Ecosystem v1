ArrayList<Wolf> wolves;
ArrayList<Sheep> sheeps;
Grass[][] lawn;

PrintWriter output;


Map map;
Graph graph;
Labels labels;

void setup() {
  size(1000, 700);
  colorMode(HSB, 360, 100, 100);
  map = new Map(2);
  graph = new Graph(1);
  labels = new Labels();
  output = createWriter("DataG4P.txt");

  lawn = new Grass[map.mapSize][map.mapSize];
  sheeps = new ArrayList();
  wolves = new ArrayList();
  
  
  //Add grass
  for (int i=0; i<map.mapSize; i++) {
    for (int j=0; j<map.mapSize; j++) {
      lawn[i][j] = new Grass();
    }
  }
  //Add sheep
  for(int i=0; i<50; i++) sheeps.add(new Sheep(275));
  //Add wolves
  for(int i=0; i<10; i++) wolves.add(new Wolf(275));
  
}

void draw() {
  background(259);

  updateWorld();
  if(frameCount%4==0){
  graph.update();
  toText();
  }

  graph.show();
  map.show();
  
  labels.show();
}

void toText(){
   output.println("Sheeps:"+sheeps.size() + "Wolves:"+wolves.size());
} 

 void closing(){
    output.flush();
    output.close();
    exit();
}
 
void updateWorld() {
  for (int i=0; i<map.mapSize; i++) {
    for (int j=0; j<map.mapSize; j++) {
      lawn[i][j].update();
    }
  }
  for (int i = 0; i<sheeps.size();i++){
    sheeps.get(i).update();
  }
  for (int i = 0; i < wolves.size(); i++) {
    wolves.get(i).update();
  }
  
  for(int i=sheeps.size()-1; i>=0; i--){
    if(sheeps.get(i).dead()) sheeps.remove(i);
  }
  for(int i=wolves.size()-1; i>=0; i--){
    if(wolves.get(i).dead()) wolves.remove(i);
  }
  
  
}


  
  
void keyPressed(){
  switch(key){
    case '1'  : {sheeps.add(new Sheep(275)); break;}
    case '2'  : {for (int i = 0; i < 10; i++){ sheeps.add(new Sheep(275));} break;}
    case '3'  : {for (int i = 0; i < 100; i++){ sheeps.add(new Sheep(275));} break;}
    case '4' :  {for (int i = 0; i < 1000; i++){ sheeps.add(new Sheep(275));} break;}
    case '5' : {wolves.add(new Wolf(275)); break;}
    case '6' : {for (int i = 0; i < 10; i++){ wolves.add(new Wolf(275));} break;}
    case '7' : {for (int i = 0; i < 100; i++){ wolves.add(new Wolf(275));} break;}
    case '8' : {for (int i = 0; i < 1000; i++){ wolves.add(new Wolf(275));} break;}
    case '9' : {if(sheeps.size() > 2){for (int i = 0; i < 1; i++){sheeps.remove(i);}} break;}
    case '0' : {if(sheeps.size() > 20){for (int i = 0; i < 10; i++){sheeps.remove(i);}} break;}
    case 'a' : {if(sheeps.size() > 200){for (int i = 0; i < 100; i++){sheeps.remove(i);}} break;}
    case 'b' : {if(sheeps.size() > 2000){for (int i = 0; i < 1000; i++){sheeps.remove(i);}} break;}
    case 'c' : {if(wolves.size() > 2){for (int i = 0; i < 1; i++){wolves.remove(i);}} break;}
    case 'd' : {if(wolves.size() > 20){for (int i = 0; i < 10; i++){wolves.remove(i);}} break;}
    case 'e' : {if(wolves.size() > 200){for (int i = 0; i < 100; i++){wolves.remove(i);}} break;}
    case 'f' : {if(wolves.size() > 2000){for (int i = 0; i < 1000; i++){wolves.remove(i);}} break;}
    case 'q' : {closing(); break;}
  }
}

//-------------------------------------------GRAPH--------------------------------------------

class Graph {
  /*  Shows the actual status of grass, sheep and wolves
   *  in the gpahs on the left
   *  ??? + contains buttons for control of entities 
   *
   */
   
  float[] grassPop;
  int[] sheepPop;
  int[] wolvesPop;
  int graphSize;
  int scale;
  int maxSheep;
  int maxWolves;
  
  
  Graph(int scale_) {
    scale = scale_;
    graphSize = (width-150-map.mapSize*map.scale)/scale;
    wolvesPop  = new int[graphSize];
    sheepPop = new int[graphSize];
    grassPop = new float[graphSize];
    
  }

  void update() {
    if(sheeps.size() > maxSheep) maxSheep = sheeps.size();
    if(wolves.size() > maxWolves) maxWolves = wolves.size();
    
    for(int i=0; i<graphSize-1; i++){ //shifts the graph to left
      wolvesPop[i] = wolvesPop[i+1];
      sheepPop[i] = sheepPop[i+1];
      grassPop[i] = grassPop[i+1];
    }
    //loads the current
    wolvesPop[graphSize-1]  = wolves.size();
    sheepPop[graphSize-1] = sheeps.size();
    grassPop[graphSize-1] = avgOfGrass();
    
  }

  void show() {
    pushMatrix(); //saves the coordinates
    translate(50, height-50-graphSize*scale);//shifts the coordinates
    stroke(0); //color of frame
    fill(360);
    rect(0,0,graphSize,graphSize);
    
    fill(0);
    text("maxSheep:"+maxSheep, 0, -10); //displays the data
    text("maxWolves:"+maxWolves, 100, -10); //displays the data
    
    //grass
    noFill();
    stroke(120,100,50);
    beginShape(); //starts at the first point 
    for(int i=0; i<graphSize; i++){
      vertex(i, map(grassPop[i], 0, 100, graphSize, 0));
    }
    endShape(); //connects with the end point
    
    fill(120,100,50);
    text(grassPop[graphSize-1],graphSize*scale,map(grassPop[graphSize-1], 0, 100, graphSize, 0));
    
    
    //sheep
    noFill();
    stroke(250,100,100);
    beginShape();
    for(int i=0; i<graphSize; i++){
      vertex(i, map(sheepPop[i], 0, maxSheep, graphSize, 0));
    }
    endShape();
    fill(250,100,100);
    text(sheepPop[graphSize-1],graphSize*scale,map(sheepPop[graphSize-1], 0, maxSheep, graphSize, 0));
    
    //wolves
    noFill();
    stroke(350,100,100);
    beginShape();
    for(int i=0; i<graphSize; i++){
      vertex(i, map(wolvesPop[i], 0, maxWolves, graphSize, 0));
    }
    endShape();
    fill(350,100,100);
    text(wolvesPop[graphSize-1],graphSize*scale,map(wolvesPop[graphSize-1], 0, maxWolves, graphSize, 0));
    
    
    popMatrix();
  }
  
  float avgOfGrass(){ 
    float total = 0;
    for (int i=0; i<map.mapSize; i++) {
      for (int j=0; j<map.mapSize; j++) {
        total += lawn[i][j].quantity;        //adds all the quantity of grass together
      }
    }
    return total/sq(map.mapSize);            //calculates the average
  }
  
}

//-----------------------------------------------GRASS------------------------------------------

class Grass {
  /*  grass is 1m x 1m
   *  density?
   *  How fast can 1m x 1m of grass regrow?
   *
   */
   
  float quantity; // 0 to 100
  float rateOfGrowth;
  
  Grass() {
    quantity = random(50)+25; //initial grass
    rateOfGrowth = 0.1;        //rate of growth 0.1 per frame
  }

  void update() { //if there is more grass than 100, it equals 100
    quantity += rateOfGrowth+random(0.02);
    if(quantity>100) quantity = 100; 
  }

}

//---------------------------------------------------MAP

class Map {
  /*  Shows the actual status of grass, sheep and wolves
   *  in the picture frame on the right
   *  
   *  
   */

  int mapSize;
  int scale;
  float sheepR;
  float wolfR;
  
  Map(int scale_) {
    scale = scale_;
    mapSize  = (min(width, height)-100)/scale;
    sheepR = 3;
    wolfR = 5;
  }

  void show() {
    pushMatrix();    //save the coordinates
    translate(width-mapSize*scale-50, 50);  //shift coordinates to the map
    noFill();                                //no color of map
    stroke(60, 100, 100);                    
    rect(-1, -1, mapSize*scale+1, mapSize*scale+1);
    noStroke();
    for (int i=0; i<lawn.length; i++) {
      for (int j=0; j<lawn[i].length; j++) {
        fill(120, 100, 50, lawn[i][j].quantity); //green
        rect(i*scale, j*scale, scale, scale);
        fill(32, 100, 38, 100 - lawn[i][j].quantity);  //brown
        rect(i*scale, j*scale, scale, scale);
      }
    }
    for (Sheep s : sheeps) {
      fill(250, 100, 100, s.fed);
      ellipse(s.pos.x*scale, s.pos.y*scale, sheepR*scale, sheepR*scale);
    }
    for (Wolf w : wolves) {
      fill(350, 100, 100, w.fed);
      ellipse(w.pos.x*scale, w.pos.y*scale, wolfR*scale, wolfR*scale);
    }
    popMatrix();
  }
}
//----------------------------------------------------Labels------------------------------------
class Labels{
    
  Labels() {
    
  }

  void show(){
  
    pushMatrix(); 
    
    stroke(0);
    fill(360);
    rect(3, 10, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("1 to add 1 sheep", 3 + 170/2, 10 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 10, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("2 to add 10 sheeps", 175 + 170/2, 10 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 40, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("3 to add 100 sheeps", 5 + 170/2, 40 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 40, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("4 to add 1000 sheeps", 175 + 170/2, 40 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 70, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("5 to add 1 wolf", 3 + 170/2, 70 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 70, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("6 to add 10 wolves", 175 + 170/2, 70 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 100, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("7 to add 100 wolves", 5 + 170/2, 100 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 100, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("8 to add 1000 wolves", 175 + 170/2, 100 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 130, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("9 to remove 1 sheep", 3 + 170/2, 130 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 130, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("0 to remove 10 sheeps", 175 + 170/2, 130 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 160, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("a to remove 100 sheeps", 5 + 170/2, 160 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 160, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("b to remove 1000 sheeps", 175 + 170/2, 160 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 190, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("c to remove 1 wolf", 3 + 170/2, 190 + 20/2);
    
    stroke(0);
    fill(360);
    rect(175, 190, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("d to remove 10 wolves", 175 + 170/2, 190 + 20/2);
    
    stroke(0);
    fill(360);
    rect(3, 220, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("e to remove 100 wolves", 5 + 170/2, 220 + 20/2);
     
    stroke(0);
    fill(360);
    rect(175, 220, 170, 20, 10);
    fill(0);
    textAlign(CENTER,CENTER);
    text("f to remove 1000 wolves", 175 + 170/2, 220 + 20/2);
    
    popMatrix();
  }
}

  
//----------------------------------------------------SHEEP-------------------------------------

class Sheep{
  /*  How much 1m x 1m of grass (1 pixel) does sheep need to eat a day?
   *
   *
   *
   */


  float fed;    // 0 to 100
  float fedFromFood;
  int lifespan;
  int maxLifespan;
  float birthCycle;

  PVector pos;
  PVector vel;
  float maxSpeed;
  PVector acc;

  

  //consume 100m^2 a week

  Sheep(int birthCycle_) {
    pos = new PVector(random(map.mapSize), random(map.mapSize));
    vel = PVector.random2D();
    fed = 100;
    fedFromFood = 20;
    lifespan = 0;
    maxLifespan = 12 * 365;
    birthCycle = random(birthCycle_);
  }

  void update() {
    //Movement
    pos.add(vel);
    out();
    
    lifespan++;
    birthCycle--;
    eat();
    birth();
  }

  void eat() {

    //Life
    fed -= 1;

    if (fed<100 && lawn[floor(pos.x)][floor(pos.y)].quantity>=fedFromFood) {
      fed += fedFromFood;
      lawn[floor(pos.x)][floor(pos.y)].quantity -= fedFromFood;
    }
  }

  void out() {
    if (pos.x<=1) {
      vel.set(-vel.x, vel.y);
      pos.set(1, pos.y);
      return;
    } else if (pos.y<=1) {
      vel.set(vel.x, -vel.y);
      pos.set(pos.x, 1);
      return;
    } else if (pos.x>=map.mapSize-1) {
      vel.set(-vel.x, vel.y);
      pos.set(map.mapSize - 1, pos.y);
      return;
    } else if (pos.y>=map.mapSize-1) {
      vel.set(vel.x, -vel.y);
      pos.set(pos.x, map.mapSize-1);
      return;
    }
  }

  boolean dead() {
    return fed<0 || lifespan>maxLifespan;
  }

  void birth() {
    if (birthCycle<0 && fed>50){
      sheeps.add(new Sheep(275));
      fed -= 50;
      birthCycle = 267;
    }
  }

    //void seek(){

    //    PVector desired = PVector.sub(this.pos);

    //    //Maximum speed
    //    desired.setMag(map(fed,0,100,1,0.01));

    //    //Steering = Desired minus velocity

    //    float steer = PVector.sub(desired, this.vel);
    //    steer.limit(this.maxforce); //limit to maximum steering force

    //    this.applyForce(steer);
    //}
  }
//--------------------------------------------------WOLF-------------------------------------

class Wolf {
  /*  How many days can wolf last from 1 sheep
   *
   *
   *
   */

  float fed;    // 0 to 100
  float fedFromFood;
  float lifespan;
  float maxLifespan;
  float birthCycle;

  PVector pos;
  PVector vel;
  float maxVel;
  PVector acc;


  Wolf(int birthCycle_) {
    pos = new PVector(random(map.mapSize), random(map.mapSize));
    vel = PVector.random2D();
    acc = new PVector(0, 0);

    fed = 100;
    lifespan = 0;
    birthCycle = random(birthCycle_);
  }

  void update() {
    //MOVEMENT
    vel.limit(2);
    pos.add(vel);
    vel.add(acc);
    if (fed<90)acc.set(seekForce());
    out();

    lifespan++;
    birthCycle--;
    eatSheep();
    birth();
    fed-=1;
  }

  void out() {
    if (pos.x<=0) {
      vel.set(-vel.x, vel.y);
      pos.set(1, pos.y);
      return;
    } else if (pos.y<=0) {
      vel.set(vel.x, -vel.y);
      pos.set(pos.x, 1);
      return;
    } else if (pos.x>=map.mapSize) {
      vel.set(-vel.x, vel.y);
      pos.set(map.mapSize - 1, pos.y);
      return;
    } else if (pos.y>=map.mapSize) {
      vel.set(vel.x, -vel.y);
      pos.set(pos.x, map.mapSize-1);
      return;
    }
  }

  boolean dead() {
    return fed<=0;
  }

  void eatSheep() {
    if (fed<100) {
      for (int i=sheeps.size()-1; i>=0; i--) {
        Sheep s = sheeps.get(i);
        if (dist(pos.x, pos.y, s.pos.x, s.pos.y)<map.sheepR+map.wolfR) {
          sheeps.remove(i);
          fed += 100;
        }
      }
    }
  }

  Sheep closest() {
    if (sheeps.size()==0) return new Sheep(275);
    float closest = 1000000;
    float current;
    Sheep closestSheep = sheeps.get(0);
    for (int i = 0; i < sheeps.size(); i++) {

      current = dist(this.pos.x, this.pos.y, sheeps.get(i).pos.x, sheeps.get(i).pos.y);
      if (current < closest) {

        closest = current;
        closestSheep = sheeps.get(i);
      }
    }
    return closestSheep;
  }

  void seek() {
    Sheep closestSheep = closest();
    PVector desired = PVector.sub(closestSheep.pos, pos);

    //Maximum speed
    desired.setMag(map(fed, 0, 100, 0.2, 0.01));

    //Steering = Desired minus velocity

    PVector steer = PVector.sub(desired, vel);
    //steer.limit(this.maxForce); //limit to maximum steering force

    acc.add(steer);
  }

  PVector seekForce() {
    PVector force;

    PVector start = new PVector(0, 0);
    start.add(pos);
    start.add(vel);
    PVector end = new PVector(0, 0);
    end.add(closest().pos);

    force = end.sub(start);
    force.setMag(map(fed, 0, 100, 1, 0.01));

    return force;
  }
  
  void birth() {
    if (birthCycle<0 && fed>50){
      wolves.add(new Wolf(275));
      fed -= 50;
      birthCycle = 267;
    }
  }
}
